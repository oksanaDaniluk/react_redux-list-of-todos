{"version":3,"sources":["api/constants/constants.ts","api/utils/getData.ts","api/utils/todosPrepader.ts","api/utils/getTodos.ts","api/utils/getUsers.ts","components/Todo/Todo.tsx","store/actionCreators.ts","store/actionTypes.ts","components/TodoList/TodoList.tsx","App.tsx","store/rootReducer.ts","store/store.ts","index.tsx"],"names":["API_URL","getData","url","fetch","then","response","json","todosPreparer","a","todos","users","map","todo","user","find","id","userId","mapDispatch","deleteTodo","type","Todo","connect","title","completed","name","className","onClick","TodoList","key","setIsLoadind","value","isLoading","setTodos","preparedTodos","setSortType","sortType","typeOfSort","App","state","props","handleLoadButton","todosPrepared","sortedTodo","useMemo","sort","b","localeCompare","todoA","todoB","Number","length","disabled","initialState","store","createStore","action","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26bf000d.chunk.js","sourcesContent":["export const API_URL = 'https://jsonplaceholder.typicode.com';\n","export const getData = <T>(url: string): Promise<T> => fetch(url).then(response => response.json());\n","import { getTodos } from './getTodos';\nimport { getUsers } from './getUsers';\n\nexport const todosPreparer = async () => {\n  const todos = await getTodos();\n  const users = await getUsers();\n\n  return todos.map(todo => ({\n    ...todo,\n    user: users.find(user => user.id === todo.userId) as User,\n  }));\n};\n","import { API_URL } from '../constants/constants';\nimport { getData } from './getData';\n\nexport const getTodos = (): Promise<Todo[]> => getData<Todo[]>(`${API_URL}/todos`);\n","import { API_URL } from '../constants/constants';\nimport { getData } from './getData';\n\nexport const getUsers = (): Promise<User[]> => getData<User[]>(`${API_URL}/users`);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { deleteTodo } from '../../store/actionCreators';\n\ninterface Props {\n  todo: PreparedTodo;\n  deleteTodo: (id: number) => void;\n}\n\n// eslint-disable-next-line no-shadow\nexport const TodoTemplate: FC<Props> = ({ todo, deleteTodo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <tr>\n      <th>{id}</th>\n      <th>{user?.name}</th>\n      <th>{title}</th>\n      <th>{completed ? 'complete' : 'active'}</th>\n      <th>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => deleteTodo(id)}\n        >\n          delete\n        </button>\n      </th>\n    </tr>\n  );\n};\n\nconst mapDispatch = {\n  deleteTodo,\n};\n\nexport const Todo = connect(null, mapDispatch)(TodoTemplate);\n","import {\n  IS_LOADING,\n  SET_TODOS,\n  DELETE_TODO,\n  SET_SORT_TYPE,\n} from './actionTypes';\n\nexport const setIsLoadind = (value: boolean) => ({\n  type: IS_LOADING,\n  isLoading: value,\n});\n\nexport const setTodos = (preparedTodos: PreparedTodo[]) => ({\n  type: SET_TODOS,\n  todos: preparedTodos,\n});\n\nexport const deleteTodo = (id: number) => ({\n  type: DELETE_TODO,\n  id,\n});\n\nexport const setSortType = (sortType: string) => ({\n  type: SET_SORT_TYPE,\n  typeOfSort: sortType,\n});\n","export const IS_LOADING = 'IS_LOADING';\nexport const SET_TODOS = 'SET_TODOS';\nexport const SET_SORT_TYPE = 'SET_SORT_TYPE';\nexport const DELETE_TODO = 'DELETE_TODO';\n","import React, { FC } from 'react';\nimport { Todo } from '../Todo/Todo';\n\ninterface Props {\n  todos: PreparedTodo[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => (\n  <table className=\"table\">\n    <thead>\n      <tr>\n        <th>ID</th>\n        <th>User</th>\n        <th>Task</th>\n        <th>Status</th>\n      </tr>\n    </thead>\n    <tbody>\n      {todos.map(todo => (\n        <Todo key={todo.id} todo={todo} />\n      ))}\n    </tbody>\n  </table>\n);\n","import React, { FC, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { todosPreparer } from './api/utils/todosPrepader';\nimport {\n  setIsLoadind,\n  setTodos,\n  setSortType,\n} from './store/actionCreators';\nimport { TodoList } from './components/TodoList/TodoList';\nimport './App.css';\n\ninterface Props extends RootState {\n  setIsLoadind: (value: boolean) => void;\n  setTodos: (todos: PreparedTodo[]) => void;\n  setSortType: (sortType: string) => void;\n}\n\nexport const AppTemplate: FC<Props> = (props) => {\n  const {\n    isLoading,\n    typeOfSort,\n    todos,\n    // eslint-disable-next-line no-shadow\n    setIsLoadind,\n    // eslint-disable-next-line no-shadow\n    setTodos,\n    // eslint-disable-next-line no-shadow\n    setSortType,\n  } = props;\n\n  const handleLoadButton = async () => {\n    setIsLoadind(true);\n    const todosPrepared = await todosPreparer();\n\n    setTodos(todosPrepared);\n\n    return todosPrepared;\n  };\n\n  const sortedTodo = useMemo(() => {\n    switch (typeOfSort) {\n      case 'title':\n        return [...todos].sort((a, b) => a.title.localeCompare(b.title));\n      case 'completed':\n        return [...todos]\n          .sort((todoA, todoB) => (Number(todoB.completed) - Number(todoA.completed)));\n      case 'user':\n        return [...todos].sort((a, b) => a.user.name.localeCompare(b.user.name));\n      default:\n        return todos;\n    }\n  }, [todos, typeOfSort]);\n\n  return (\n    <>\n      <h1>Dynamic list of TODOs</h1>\n      {todos.length === 0\n        ? (\n          <button\n            type=\"button\"\n            disabled={isLoading}\n            onClick={handleLoadButton}\n            className=\"button\"\n          >\n            {isLoading ? (<>Loading...</>) : <>Load Todos</>}\n          </button>\n        )\n        : (\n          <>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => setSortType('title')}\n            >\n              sort by title\n            </button>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => {\n                setSortType('completed');\n              }}\n            >\n              sort by status\n            </button>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => setSortType('user')}\n            >\n              by user name\n            </button>\n            <TodoList todos={sortedTodo} />\n          </>\n        )}\n    </>\n  );\n};\n\nconst mapState = (state: RootState) => ({\n  isLoading: state.isLoading,\n  todos: state.todos,\n  typeOfSort: state.typeOfSort,\n});\n\nconst mapDispatch = {\n  setIsLoadind,\n  setTodos,\n  setSortType,\n};\n\nexport const App = connect(\n  mapState,\n  mapDispatch,\n)(AppTemplate);\n","import { AnyAction } from 'redux';\nimport {\n  IS_LOADING,\n  SET_TODOS,\n  DELETE_TODO,\n  SET_SORT_TYPE,\n} from './actionTypes';\n\n\nexport const initialState: RootState = {\n  isLoading: false,\n  todos: [],\n  typeOfSort: '',\n};\n\nexport const rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n    case SET_SORT_TYPE:\n      return {\n        ...state,\n        typeOfSort: action.typeOfSort,\n      };\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: (state.todos.filter(todo => todo.id !== action.id)),\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore } from 'redux';\nimport { rootReducer, initialState } from './rootReducer';\n\nexport const store = createStore(rootReducer, initialState);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}