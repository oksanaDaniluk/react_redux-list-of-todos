{"version":3,"sources":["api/constants/constants.ts","api/utils/getData.ts","api/utils/todosPrepader.ts","api/utils/getTodos.ts","api/utils/getUsers.ts","components/Todo/Todo.tsx","store/actionCreators.ts","store/actionTypes.ts","components/Todo/TodoTemplate.tsx","components/TodoList/TodoList.tsx","components/TodoList/TodoListTemplate.tsx","components/App/App.ts","components/App/AppTemplate.tsx","store/rootReducer.ts","store/store.ts","index.tsx"],"names":["API_URL","getData","url","fetch","then","response","json","todosPreparer","a","todos","users","map","todo","user","find","id","userId","mapDispatch","deleteTodo","type","Todo","connect","title","completed","name","className","onClick","setSortType","sortType","typeOfSort","TodoList","state","sortedTodo","useMemo","sort","b","localeCompare","todoA","todoB","Number","key","loadTodos","dispatch","isLoading","todosPrepared","App","props","length","disabled","initialState","store","createStore","action","filter","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7269b9f6.chunk.js","sourcesContent":["export const API_URL = 'https://jsonplaceholder.typicode.com';\n","export const getData = <T>(url: string): Promise<T> => fetch(url).then(response => response.json());\n","import { getTodos } from './getTodos';\nimport { getUsers } from './getUsers';\n\nexport const todosPreparer = async () => {\n  const todos = await getTodos();\n  const users = await getUsers();\n\n  return todos.map(todo => ({\n    ...todo,\n    user: users.find(user => user.id === todo.userId) as User,\n  }));\n};\n","import { API_URL } from '../constants/constants';\nimport { getData } from './getData';\n\nexport const getTodos = (): Promise<Todo[]> => getData<Todo[]>(`${API_URL}/todos`);\n","import { API_URL } from '../constants/constants';\nimport { getData } from './getData';\n\nexport const getUsers = (): Promise<User[]> => getData<User[]>(`${API_URL}/users`);\n","import { connect } from 'react-redux';\nimport { deleteTodo } from '../../store/actionCreators';\nimport { TodoTemplate } from './TodoTemplate';\n\n\nconst mapDispatch = {\n  deleteTodo,\n};\n\nexport const Todo = connect(null, mapDispatch)(TodoTemplate);\n","import { Dispatch } from 'redux';\nimport {\n  IS_LOADING,\n  SET_TODOS,\n  DELETE_TODO,\n  SET_SORT_TYPE,\n} from './actionTypes';\nimport { todosPreparer } from '../api/utils/todosPrepader';\n\n\nexport const setIsLoadind = (value: boolean) => ({\n  type: IS_LOADING,\n  isLoading: value,\n});\n\nexport const setTodos = (preparedTodos: PreparedTodo[]) => ({\n  type: SET_TODOS,\n  todos: preparedTodos,\n});\n\nexport const deleteTodo = (id: number) => ({\n  type: DELETE_TODO,\n  id,\n});\n\nexport const setSortType = (sortType: string) => ({\n  type: SET_SORT_TYPE,\n  typeOfSort: sortType,\n});\n\nexport const loadTodos = () => {\n  return async (dispatch: Dispatch) => {\n    dispatch(setIsLoadind(true));\n    const todosPrepared = await todosPreparer();\n\n    dispatch(setTodos(todosPrepared));\n  };\n};\n","export const IS_LOADING = 'IS_LOADING';\nexport const SET_TODOS = 'SET_TODOS';\nexport const SET_SORT_TYPE = 'SET_SORT_TYPE';\nexport const DELETE_TODO = 'DELETE_TODO';\n","import React, { FC } from 'react';\n\ninterface Props {\n  todo: PreparedTodo;\n  deleteTodo: (id: number) => void;\n}\n\nexport const TodoTemplate: FC<Props> = ({ todo, deleteTodo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <tr>\n      <th>{id}</th>\n      <th>{user?.name}</th>\n      <th>{title}</th>\n      <th>{completed ? 'complete' : 'active'}</th>\n      <th>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => deleteTodo(id)}\n        >\n          delete\n        </button>\n      </th>\n    </tr>\n  );\n};\n","import { connect } from 'react-redux';\nimport { setSortType } from '../../store/actionCreators';\nimport { TodoListTemplate } from './TodoListTemplate';\n\nconst mapState = (state: RootState) => ({\n  todos: state.todos,\n  typeOfSort: state.typeOfSort,\n});\n\nconst mapDispatch = {\n  setSortType,\n};\n\nexport const TodoList = connect(mapState, mapDispatch)(TodoListTemplate);\n","import React, { FC, useMemo } from 'react';\nimport { Todo } from '../Todo/Todo';\n\ninterface Props {\n  typeOfSort: string;\n  todos: PreparedTodo[];\n  setSortType: (typeOfSort: string) => void;\n}\n\n// eslint-disable-next-line no-shadow\nexport const TodoListTemplate: FC<Props> = ({ todos, typeOfSort, setSortType }) => {\n  const sortedTodo = useMemo(() => {\n    switch (typeOfSort) {\n      case 'title':\n        return [...todos].sort((a, b) => a.title.localeCompare(b.title));\n      case 'completed':\n        return [...todos]\n          .sort((todoA, todoB) => (Number(todoB.completed) - Number(todoA.completed)));\n      case 'user':\n        return [...todos].sort((a, b) => a.user.name.localeCompare(b.user.name));\n      default:\n        return todos;\n    }\n  }, [todos, typeOfSort]);\n\n  return (\n    <>\n      <button\n        className=\"button\"\n        type=\"button\"\n        onClick={() => setSortType('title')}\n      >\n        sort by title\n      </button>\n      <button\n        className=\"button\"\n        type=\"button\"\n        onClick={() => {\n          setSortType('completed');\n        }}\n      >\n        sort by status\n      </button>\n      <button\n        className=\"button\"\n        type=\"button\"\n        onClick={() => setSortType('user')}\n      >\n        by user name\n      </button>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>User</th>\n            <th>Task</th>\n            <th>Status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sortedTodo.map(todo => (\n            <Todo key={todo.id} todo={todo} />\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { connect } from 'react-redux';\nimport { loadTodos } from '../../store/actionCreators';\nimport './App.css';\nimport { AppTemplate } from './AppTemplate';\n\n\nconst mapState = (state: RootState) => ({\n  isLoading: state.isLoading,\n  todos: state.todos,\n});\n\nconst mapDispatch = {\n  loadTodos,\n};\n\nexport const App = connect(\n  mapState,\n  mapDispatch,\n)(AppTemplate);\n","import React, { FC } from 'react';\nimport { TodoList } from '../TodoList/TodoList';\n\ninterface Props {\n  todos: PreparedTodo[];\n  isLoading: boolean;\n  loadTodos: () => void;\n}\n\nexport const AppTemplate: FC<Props> = (props) => {\n  const {\n    isLoading,\n    todos,\n    loadTodos,\n  } = props;\n\n  return (\n    <>\n      <h1>Dynamic list of TODOs</h1>\n      {todos.length === 0\n        ? (\n          <button\n            type=\"button\"\n            disabled={isLoading}\n            onClick={loadTodos}\n            className=\"button\"\n          >\n            {isLoading ? (<>Loading...</>) : <>Load Todos</>}\n          </button>\n        )\n        : (\n          <TodoList />\n        )}\n    </>\n  );\n};\n","import { AnyAction } from 'redux';\nimport {\n  IS_LOADING,\n  SET_TODOS,\n  DELETE_TODO,\n  SET_SORT_TYPE,\n} from './actionTypes';\n\n\nexport const initialState: RootState = {\n  isLoading: false,\n  todos: [],\n  typeOfSort: '',\n};\n\nexport const rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n    case SET_SORT_TYPE:\n      return {\n        ...state,\n        typeOfSort: action.typeOfSort,\n      };\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: (state.todos.filter(todo => todo.id !== action.id)),\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './rootReducer';\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App/App';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}