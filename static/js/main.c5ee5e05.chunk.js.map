{"version":3,"sources":["api/constants/constants.ts","api/utils/getData.ts","api/utils/todosPrepader.ts","api/utils/getTodos.ts","api/utils/getUsers.ts","store/store.ts","components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["API_URL","getData","url","fetch","then","response","json","todosPreparer","a","todos","users","map","todo","user","find","id","userId","initialState","isLoading","typeOfSort","store","createStore","state","action","type","Todo","title","completed","name","TodoList","className","key","mapDispatch","setIsLoadind","value","setTodos","preparedTodos","setSortType","sortType","App","connect","props","handleLoadButton","todosPrepared","sortedTodo","useMemo","sort","b","localeCompare","todoA","todoB","Number","length","disabled","onClick","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c5ee5e05.chunk.js","sourcesContent":["export const API_URL = 'https://jsonplaceholder.typicode.com';\n","export const getData = <T>(url: string): Promise<T> => fetch(url).then(response => response.json());\n","import { getTodos } from './getTodos';\nimport { getUsers } from './getUsers';\n\nexport const todosPreparer = async () => {\n  const todos = await getTodos();\n  const users = await getUsers();\n\n  return todos.map(todo => ({\n    ...todo,\n    user: users.find(user => user.id === todo.userId) as User,\n  }));\n};\n","import { API_URL } from '../constants/constants';\nimport { getData } from './getData';\n\nexport const getTodos = (): Promise<Todo[]> => getData<Todo[]>(`${API_URL}/todos`);\n","import { API_URL } from '../constants/constants';\nimport { getData } from './getData';\n\nexport const getUsers = (): Promise<User[]> => getData<User[]>(`${API_URL}/users`);\n","import { AnyAction, createStore } from 'redux';\n\nexport const initialState: RootState = {\n  isLoading: false,\n  todos: [],\n  typeOfSort: '',\n};\n\nexport const IS_LOADING = 'IS_LOADING';\nexport const SET_TODOS = 'SET_TODOS';\nexport const SET_SORT_TYPE = 'SET_SORT_TYPE';\nexport const DELETE_TODO = 'DELETE_TODO';\n\nexport const setIsLoadind = (value: boolean) => ({\n  type: IS_LOADING,\n  isLoading: value,\n});\n\nexport const setTodos = (preparedTodos: PreparedTodo[]) => ({\n  type: SET_TODOS,\n  todos: preparedTodos,\n});\n\nexport const deleteTodo = (id: number) => ({\n  type: DELETE_TODO,\n  id,\n});\n\nexport const setSortType = (sortType: string) => ({\n  type: SET_SORT_TYPE,\n  typeOfSort: sortType,\n});\n\nexport const rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n    case SET_SORT_TYPE:\n      return {\n        ...state,\n        typeOfSort: action.typeOfSort,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(rootReducer, initialState);\n","import React, { FC } from 'react';\n/* import { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { deleteTodo } from '../../store/store'; */\n\ninterface Props {\n  todo: PreparedTodo;\n  /* delTodo: (id: number) => void; */\n}\n\nexport const Todo: FC<Props> = ({ todo /* delTodo */ }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <tr>\n      <th>{id}</th>\n      <th>{user?.name}</th>\n      <th>{title}</th>\n      <th>{completed ? 'complete' : 'active'}</th>\n      {/* <th>\n        <button\n          type=\"button\"\n          onClick={() => delTodo(id)}\n        >\n          delete\n        </button>\n      </th> */}\n    </tr>\n  );\n};\n/*\nconst mapDispatch = (dispatch: Dispatch) => ({\n  deleteTodo: (id: number) => dispatch(deleteTodo(id)),\n});\n\nexport const Todo = connect(null, mapDispatch)(TodoTemplate); */\n","import React, { FC } from 'react';\nimport { Todo } from '../Todo/Todo';\n\ninterface Props {\n  todos: PreparedTodo[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => (\n  <table className=\"table\">\n    <thead>\n      <tr>\n        <th>ID</th>\n        <th>User</th>\n        <th>Task</th>\n        <th>Status</th>\n      </tr>\n    </thead>\n    <tbody>\n      {todos.map(todo => (\n        <Todo key={todo.id} todo={todo} />\n      ))}\n    </tbody>\n  </table>\n);\n","import React, { FC, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { todosPreparer } from './api/utils/todosPrepader';\nimport {\n  setIsLoadind,\n  setTodos,\n  setSortType,\n} from './store/store';\nimport { TodoList } from './components/TodoList/TodoList';\nimport './App.css';\n\ninterface Props extends RootState {\n  setIsLoadind: (value: boolean) => void;\n  setTodos: (todos: PreparedTodo[]) => void;\n  setSortType: (sortType: string) => void;\n}\n\nexport const AppTemplate: FC<Props> = (props) => {\n  const {\n    isLoading,\n    typeOfSort,\n    todos,\n    // eslint-disable-next-line no-shadow\n    setIsLoadind,\n    // eslint-disable-next-line no-shadow\n    setTodos,\n    // eslint-disable-next-line no-shadow\n    setSortType,\n  } = props;\n\n  const handleLoadButton = async () => {\n    setIsLoadind(true);\n    const todosPrepared = await todosPreparer();\n\n    setTodos(todosPrepared);\n\n    return todosPrepared;\n  };\n\n  /* const handleTypeOfSort = (typeOfSort: string) => {\n    switch (typeOfSort) {\n      case 'title':\n        setTodos([...todos].sort((a, b) => a.title.localeCompare(b.title)));\n        break;\n      case 'completed':\n        setTodos([...todos]\n          .sort((todoA, todoB) => (Number(todoB.completed) - Number(todoA.completed))));\n        break;\n      case 'user':\n        setTodos([...todos].sort((a, b) => a.user.name.localeCompare(b.user.name)));\n        break;\n      default:\n    }\n  }; */\n\n  const sortedTodo = useMemo(() => {\n    switch (typeOfSort) {\n      case 'title':\n        return [...todos].sort((a, b) => a.title.localeCompare(b.title));\n      case 'completed':\n        return [...todos]\n          .sort((todoA, todoB) => (Number(todoB.completed) - Number(todoA.completed)));\n      case 'user':\n        return [...todos].sort((a, b) => a.user.name.localeCompare(b.user.name));\n      default:\n        return todos;\n    }\n  }, [todos, typeOfSort]);\n\n  return (\n    <>\n      <h1>Dynamic list of TODOs</h1>\n      {todos.length === 0\n        ? (\n          <button\n            type=\"button\"\n            disabled={isLoading}\n            onClick={handleLoadButton}\n            className=\"button\"\n          >\n            {isLoading ? (<>Loading...</>) : <>Load Todos</>}\n          </button>\n        )\n        : (\n          <>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => setSortType('title')}\n            >\n              sort by title\n            </button>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => {\n                setSortType('completed');\n                console.log(typeOfSort);\n              }}\n            >\n              sort by status\n            </button>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => setSortType('user')}\n            >\n              by user name\n            </button>\n            <TodoList todos={sortedTodo} />\n          </>\n        )}\n    </>\n  );\n};\n\nconst mapState = (state: RootState) => ({\n  isLoading: state.isLoading,\n  todos: state.todos,\n  typeOfSort: state.typeOfSort,\n});\n\nconst mapDispatch = {\n  setIsLoadind,\n  setTodos,\n  setSortType,\n};\n\nexport const App = connect(\n  mapState,\n  mapDispatch,\n)(AppTemplate);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}